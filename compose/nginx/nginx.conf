# coding: utf-8

# References [1]: http://www.codestance.com/tutorials-archive/nginx-tuning-for-best-performance-255

# [1] you must set worker processes based on your CPU cores
worker_processes 1;
 
events {
  # [1] : worker_connections determines how much clients will be served per worker
  # max clients = worker_connections * worker_processes
  # max clients is also limited by the number of socket connections available on the system (~64k)
  # Note - this WP nginx proxy is sitting behind a CDN, so very few client connections are expected
  worker_connections  32;

  accept_mutex off;
  #  to on if you have more than 1 worker_processes 
}

http {
 
  # use the kernel sendfile
  sendfile        on;
  # prepend http headers before sendfile() 
  tcp_nopush     on;

  # [1] don't buffer data sent, good for small data bursts in real time
  tcp_nodelay        on;

  # [1] allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

  server_tokens off;

  gzip  on;
  gzip_vary on;
  gzip_min_length 500;
  
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/xml text/css
     text/comma-separated-values
     text/javascript application/x-javascript
     application/atom+xml image/x-icon;

  upstream docker-wordpress {
    server wordpress:80;
  }
 
  server {
  	listen 80;
	  server_name *.wootmath.com;
  	return 302 https://$host$request_uri;
  }

  # server {
  #   listen 80;
  #   server_name *.wootmath.com <%= @my_ip %> 127.0.0.1 localhost;
  
  #   merge_slashes on;  # collapse repreaed url slashes to singe, e.g. foo//bar.html --> foo/bar.html
  
  #   location / {
  #     proxy_pass         http://docker-wordpress;
  #     proxy_redirect     off;
  #     proxy_set_header   Host $host;
  #     proxy_set_header   X-Real-IP $remote_addr;
  #     proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
  #   }
  # }

  server {
    listen 443;
    server_name *.wootmath.com <%= @my_ip %> 127.0.0.1 localhost;

    merge_slashes on;

    ssl on;
    ssl_certificate /etc/ssl/chain.pem;
    ssl_certificate_key /etc/ssl/private.pem;

    # --
    # The following settings are for SSL security and performance (including forward secrecy)
    # See:
    #   https://community.qualys.com/blogs/securitylabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy
    #   https://community.qualys.com/blogs/securitylabs/2013/06/25/ssl-labs-deploying-forward-secrecy 
    #   http://blog.cloudflare.com/ocsp-stapling-how-cloudflare-just-made-ssl-30
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
    ssl_prefer_server_ciphers on;
    ssl_stapling on;

    location / {
      proxy_pass         http://docker-wordpress;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto https;
    }
  }

  # ORIGIN FOR CLOUDFRONT (port 4043)
  server {
    #https traffic resolved at the edge / cdn comes in here on http. Same block as above except forces  X-Forwarded-For
    listen 4043;
    server_name *.wootmath.com <%= @my_ip %> 127.0.0.1 localhost;

    merge_slashes on;

    location / {
      proxy_pass         http://docker-wordpress;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto https;
    }
  }

}
